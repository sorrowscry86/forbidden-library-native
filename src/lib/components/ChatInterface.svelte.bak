<script lang="ts">
	import { onMount, afterUpdate } from 'svelte';
	import { invokeWithTimeout, ms } from '$lib/services/api';
	import { isTauriAvailable, getEnvironment } from '$lib/utils/tauri-detection';
	import MessageBubble from './MessageBubble.svelte';
	import type { Conversation, Message, AiResponse } from '$lib/types/models';

	export let conversation: Conversation;

	let messages: Message[] = [];
	let messageInput = '';
	let loading = false;
	let sending = false;
	let messagesContainer: HTMLDivElement | undefined;
	let environment = getEnvironment();

	$: if (conversation) {
		loadMessages();
	}

	onMount(() => {
		if (conversation) {
			loadMessages();
		}
	});

	afterUpdate(() => {
		scrollToBottom();
	});

	async function loadMessages() {
		if (!conversation?.id) return;

		try {
			loading = true;
			messages = await invokeWithTimeout<Message[]>('get_messages', { conversation_id: conversation.id }, ms(8));
		} catch (error) {
			console.error('Failed to load messages:', error);
			// In web mode, use conversation.messages if available
			if (environment === 'web' && conversation.messages) {
				messages = conversation.messages;
			}
		} finally {
			loading = false;
		}
	}

	async function sendMessage() {
		if (!messageInput.trim() || sending || !conversation?.id) return;

		const userMessage = messageInput.trim();
		messageInput = '';
		sending = true;

		try {
			// Add user message to database
			const userMsg = await invokeWithTimeout<Message>('add_message', {
				conversation_id: conversation.id,
				role: 'user',
				content: userMessage,
				tokens_used: null,
				model_used: null
			}, ms(8));

			messages = [...messages, userMsg];

			// Send to AI and get response
			const aiResponse = await invokeWithTimeout<AiResponse>('send_ai_request', {
				message: userMessage,
				_persona_id: conversation.persona_id,
				_conversation_id: conversation.id,
				model: null
			}, ms(15));

			// Add AI response to database
			const aiMsg = await invokeWithTimeout<Message>('add_message', {
				conversation_id: conversation.id,
				role: 'assistant',
				content: aiResponse.content,
				tokens_used: aiResponse.tokens_used,
				model_used: aiResponse.model_used
			}, ms(8));

			messages = [...messages, aiMsg];

		} catch (error) {
			console.error('Failed to send message:', error);
			
			// In web mode, create a demo response
			if (environment === 'web') {
				const demoResponse: Message = {
					id: Date.now(),
					conversation_id: conversation.id as number,
					role: 'assistant',
					content: `This is a demo response in web mode. The full Tauri desktop application provides AI integration with local processing and enhanced privacy controls. Error: ${String(error)}`,
					created_at: new Date().toISOString(),
					tokens_used: null,
					model_used: 'demo-model'
				};
				messages = [...messages, demoResponse];
			} else {
				// Add error message to UI (local-only placeholder)
				messages = [
					...messages,
					{
						id: Date.now(),
						role: 'system',
						content: `Error: ${String(error)}`,
						// Provide required fields to satisfy Message typing
						conversation_id: conversation.id as number,
						created_at: new Date().toISOString(),
						tokens_used: null,
						model_used: null
					} as unknown as Message
				];
			}
		} finally {
			sending = false;
		}
	}

	function scrollToBottom() {
		if (messagesContainer) {
			messagesContainer.scrollTop = messagesContainer.scrollHeight;
		}
	}

	    async function exportConversation() {
        if (!conversation?.id) return;
        
        try {
            const result = await invokeWithTimeout('export_conversation', {
                conversation_id: conversation.id,
                format: 'json'
            }, ms(10));
            
            console.log('Conversation exported:', result);
            // Add UI feedback here
        } catch (error) {
            console.error('Failed to export conversation:', error);
            // Add error handling here
        }
    }

    async function archiveConversation(id: number) {
        if (!id) return;
        
        try {
            await invokeWithTimeout('archive_conversation', {
                id,
                archived: true
            }, ms(8));
            
            console.log('Conversation archived');
            // Add UI feedback or navigation here
        } catch (error) {
            console.error('Failed to archive conversation:', error);
            // Add error handling here
        }
    }

function handleKeyPress(event: KeyboardEvent) {
		if (event.key === 'Enter' && !event.shiftKey) {
			event.preventDefault();
			sendMessage();
		}
	}
</script>

<div class="flex flex-col h-full">
	<!-- Chat Header -->
	<div class="bg-gray-800 border-b border-gray-700 px-6 py-4">
		<div class="flex items-center justify-between">
			<div>
				<h2 class="text-lg font-semibold text-white">{conversation.title}</h2>
				<p class="text-sm text-gray-400">
					{messages.length} messages
					{#if conversation.persona_id}
						‚Ä¢ Persona: {conversation.persona_id}
					{/if}
					{#if environment === 'web'}
						‚Ä¢ Web Mode
					{/if}
				</p>
			</div>

			<div class="flex items-center space-x-2">
				<button\r\n                                        class="p-2 text-gray-400 hover:text-white transition-colors"\r\n                                        title="Export conversation"\r\n                                        on:click={exportConversation}\r\n                                >
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
					</svg>
				</button>

<button class="p-2 text-gray-400 hover:text-white transition-colors" title="Archive conversation" on:click={() => archiveConversation(conversation.id)}><svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8l6 6 6-6"></path></svg></button>
			</div>
		</div>
	</div>

	<!-- Messages Area -->
	<div
		bind:this={messagesContainer}
		class="flex-1 overflow-y-auto p-6 space-y-4"
	>
		{#if loading}
			<div class="flex justify-center py-8">
				<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
			</div>
		{:else if messages.length === 0}
			<div class="flex flex-col items-center justify-center h-full text-gray-400">
				<div class="w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center mb-4">
					<svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
					</svg>
				</div>
				<p class="text-lg font-medium mb-2">Start the conversation</p>
				<p class="text-sm text-gray-500">Send a message to begin chatting</p>
				
				{#if environment === 'web'}
					<div class="mt-4 bg-gray-700 rounded-lg p-3 max-w-sm text-center">
						<p class="text-xs text-gray-300">
							üåê Web mode: Demo conversations only. Install desktop app for full AI features.
						</p>
					</div>
				{/if}
			</div>
		{:else}
			{#each messages as message (message.id)}
				<MessageBubble {message} />
			{/each}
		{/if}

		{#if sending}
			<div class="flex justify-start">
				<div class="bg-gray-700 rounded-lg px-4 py-2 max-w-xs">
					<div class="flex items-center space-x-2">
						<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600"></div>
						<span class="text-sm text-gray-300">
							{#if environment === 'web'}
								Processing demo response...
							{:else}
								AI is thinking...
							{/if}
						</span>
					</div>
				</div>
			</div>
		{/if}
	</div>

	<!-- Message Input -->
	<div class="bg-gray-800 border-t border-gray-700 p-4">
		<div class="flex items-end space-x-4">
			<div class="flex-1">
				<textarea
					bind:value={messageInput}
					on:keydown={handleKeyPress}
					placeholder="Type your message... (Enter to send, Shift+Enter for new line)"
					class="w-full bg-gray-700 text-white placeholder-gray-400 border border-gray-600 rounded-lg px-4 py-3 resize-none focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent"
					rows="1"
					disabled={sending}
				></textarea>
			</div>

			<button
				on:click={sendMessage}
				disabled={!messageInput.trim() || sending}
				class="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white p-3 rounded-lg transition-colors"
				title="Send message"
			>
				<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
				</svg>
			</button>
		</div>
		
		{#if environment === 'web'}
			<div class="mt-2 text-xs text-gray-400 text-center">
				üåê Web mode: Messages are demo only. Install desktop app for full functionality.
			</div>
		{/if}
	</div>
</div>


